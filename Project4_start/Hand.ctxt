#BlueJ class context
comment0.target=Hand
comment0.text=\r\n\ <p>A\ Hand\ of\ Uno\ cards,\ held\ by\ a\ particular\ player.\ A\ Hand\ object\ is\r\n\ responsible\ for\ playing\ a\ Card\ (<i>i.e.</i>,\ actually\ choosing\ a\ card\ to\r\n\ play)\ when\ the\ player's\ turn\ comes\ up.\ To\ do\ this,\ it\ implements\ the\r\n\ strategy\ pattern\ by\ which\ this\ choice\ can\ be\ delegated\ to\ an\ arbitrary\r\n\ implementer\ of\ the\ UnoPlayer\ class.</p>\r\n\ @since\ 1.0\r\n
comment1.params=unoPlayerClassName\ playerName
comment1.target=Hand(java.lang.String,\ java.lang.String)
comment1.text=\r\n\ Instantiate\ a\ Hand\ object\ to\ be\ played\ by\ the\ UnoPlayer\ class,\ and\r\n\ the\ player\ name,\ passed\ as\ arguments.\ This\ implements\ a\ strategy\r\n\ pattern\ whereby\ the\ constructor\ accepts\ various\ strategies\ that\r\n\ implement\ the\ UnoPlayer\ interface.\r\n
comment2.params=c
comment2.target=void\ addCard(Card)
comment2.text=\r\n\ Add\ (draw)\ a\ card\ to\ the\ hand.\r\n
comment3.params=
comment3.target=int\ size()
comment3.text=\r\n\ Return\ the\ number\ of\ cards\ in\ the\ hand.\r\n
comment4.params=game
comment4.target=Card\ play(Game)
comment4.text=\r\n\ It's\ your\ turn\:\ play\ a\ card.\ When\ this\ method\ is\ called,\ the\ Hand\r\n\ object\ choose\ a\ Card\ from\ the\ Hand\ based\ on\ the\ strategy\ that\ is\r\n\ controlling\ it\ (<i>i.e.</i>,\ whose\ code\ was\ passed\ to\ the\ Hand\r\n\ constructor.)\ If\ the\ player\ cannot\ legally\ play\ any\ of\ his/her\r\n\ cards,\ null\ is\ returned.\r\n\ @return\ The\ Card\ object\ to\ be\ played\ (which\ has\ been\ removed\ from\r\n\ this\ Hand\ as\ a\ side\ effect),\ or\ null\ if\ no\ such\ Card\ can\ be\ played.\r\n
comment5.params=game
comment5.target=UnoPlayer.Color\ callColor(Game)
comment5.text=\r\n\ Designed\ to\ be\ called\ in\ response\ to\ a\ wild\ card\ having\ been\ played\r\n\ on\ the\ previous\ call\ to\ this\ object's\ play()\ method.\ This\ method\r\n\ will\ choose\ one\ of\ the\ four\ colors\ based\ on\ the\ strategy\ controlling\r\n\ it\ (<i>i.e.</i>,\ the\ class\ whose\ code\ was\ passed\ to\ the\ Hand\r\n\ constructor.)\r\n\ @return\ A\ Color\ value,\ <i>not</i>\ Color.NONE.\r\n
comment6.params=
comment6.target=boolean\ isEmpty()
comment6.text=\r\n\ Return\ true\ only\ if\ this\ Hand\ has\ no\ cards,\ which\ should\ trigger\ a\r\n\ winning\ condition.\r\n
comment7.params=
comment7.target=java.lang.String\ toString()
comment7.text=\r\n\ Return\ a\ string\ rendering\ of\ this\ Hand.\ See\ Card\:\:toString()\ for\r\n\ notes\ about\ how\ individual\ cards\ are\ rendered.\r\n
comment8.params=
comment8.target=int\ countCards()
comment8.text=\r\n\ Return\ the\ forfeit\ value\ of\ this\ Hand,\ as\ it\ now\ stands\ (in\ other\r\n\ words,\ the\ sum\ of\ all\ the\ forfeit\ values\ of\ cards\ still\ possessed.)\r\n
comment9.params=
comment9.target=java.lang.String\ getPlayerName()
comment9.text=\r\n\ Return\ the\ name\ of\ the\ contestant.\r\n
numComments=10
